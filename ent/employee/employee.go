// Code generated by ent, DO NOT EDIT.

package employee

import (
	"fmt"

	"entgo.io/ent/dialect/sql"
)

const (
	// Label holds the string label denoting the employee type in the database.
	Label = "employee"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldFirstName holds the string denoting the firstname field in the database.
	FieldFirstName = "first_name"
	// FieldLastName holds the string denoting the lastname field in the database.
	FieldLastName = "last_name"
	// FieldDateOfBirth holds the string denoting the dateofbirth field in the database.
	FieldDateOfBirth = "date_of_birth"
	// FieldStartDate holds the string denoting the startdate field in the database.
	FieldStartDate = "start_date"
	// FieldDepartment holds the string denoting the department field in the database.
	FieldDepartment = "department"
	// FieldStreet holds the string denoting the street field in the database.
	FieldStreet = "street"
	// FieldCity holds the string denoting the city field in the database.
	FieldCity = "city"
	// FieldState holds the string denoting the state field in the database.
	FieldState = "state"
	// FieldZipCode holds the string denoting the zipcode field in the database.
	FieldZipCode = "zip_code"
	// Table holds the table name of the employee in the database.
	Table = "employees"
)

// Columns holds all SQL columns for employee fields.
var Columns = []string{
	FieldID,
	FieldFirstName,
	FieldLastName,
	FieldDateOfBirth,
	FieldStartDate,
	FieldDepartment,
	FieldStreet,
	FieldCity,
	FieldState,
	FieldZipCode,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// FirstNameValidator is a validator for the "firstName" field. It is called by the builders before save.
	FirstNameValidator func(string) error
	// LastNameValidator is a validator for the "lastName" field. It is called by the builders before save.
	LastNameValidator func(string) error
	// StreetValidator is a validator for the "street" field. It is called by the builders before save.
	StreetValidator func(string) error
	// CityValidator is a validator for the "city" field. It is called by the builders before save.
	CityValidator func(string) error
	// ZipCodeValidator is a validator for the "zipCode" field. It is called by the builders before save.
	ZipCodeValidator func(string) error
)

// Department defines the type for the "department" enum field.
type Department string

// Department values.
const (
	DepartmentSales          Department = "Sales"
	DepartmentMarketing      Department = "Marketing"
	DepartmentEngineering    Department = "Engineering"
	DepartmentHumanResources Department = "Human Resources"
	DepartmentLegal          Department = "Legal"
)

func (d Department) String() string {
	return string(d)
}

// DepartmentValidator is a validator for the "department" field enum values. It is called by the builders before save.
func DepartmentValidator(d Department) error {
	switch d {
	case DepartmentSales, DepartmentMarketing, DepartmentEngineering, DepartmentHumanResources, DepartmentLegal:
		return nil
	default:
		return fmt.Errorf("employee: invalid enum value for department field: %q", d)
	}
}

// State defines the type for the "state" enum field.
type State string

// State values.
const (
	StateAL State = "AL"
	StateAK State = "AK"
	StateAS State = "AS"
	StateAZ State = "AZ"
	StateAR State = "AR"
	StateCA State = "CA"
	StateCO State = "CO"
	StateCT State = "CT"
	StateDE State = "DE"
	StateDC State = "DC"
	StateFM State = "FM"
	StateFL State = "FL"
	StateGA State = "GA"
	StateGU State = "GU"
	StateHI State = "HI"
	StateID State = "ID"
	StateIL State = "IL"
	StateIN State = "IN"
	StateIA State = "IA"
	StateKS State = "KS"
	StateKY State = "KY"
	StateLA State = "LA"
	StateME State = "ME"
	StateMH State = "MH"
	StateMD State = "MD"
	StateMA State = "MA"
	StateMI State = "MI"
	StateMN State = "MN"
	StateMS State = "MS"
	StateMO State = "MO"
	StateMT State = "MT"
	StateNE State = "NE"
	StateNV State = "NV"
	StateNH State = "NH"
	StateNJ State = "NJ"
	StateNM State = "NM"
	StateNY State = "NY"
	StateNC State = "NC"
	StateND State = "ND"
	StateMP State = "MP"
	StateOH State = "OH"
	StateOK State = "OK"
	StateOR State = "OR"
	StatePW State = "PW"
	StatePA State = "PA"
	StatePR State = "PR"
	StateRI State = "RI"
	StateSC State = "SC"
	StateSD State = "SD"
	StateTN State = "TN"
	StateTX State = "TX"
	StateUT State = "UT"
	StateVT State = "VT"
	StateVI State = "VI"
	StateVA State = "VA"
	StateWA State = "WA"
	StateWV State = "WV"
	StateWI State = "WI"
	StateWY State = "WY"
)

func (s State) String() string {
	return string(s)
}

// StateValidator is a validator for the "state" field enum values. It is called by the builders before save.
func StateValidator(s State) error {
	switch s {
	case StateAL, StateAK, StateAS, StateAZ, StateAR, StateCA, StateCO, StateCT, StateDE, StateDC, StateFM, StateFL, StateGA, StateGU, StateHI, StateID, StateIL, StateIN, StateIA, StateKS, StateKY, StateLA, StateME, StateMH, StateMD, StateMA, StateMI, StateMN, StateMS, StateMO, StateMT, StateNE, StateNV, StateNH, StateNJ, StateNM, StateNY, StateNC, StateND, StateMP, StateOH, StateOK, StateOR, StatePW, StatePA, StatePR, StateRI, StateSC, StateSD, StateTN, StateTX, StateUT, StateVT, StateVI, StateVA, StateWA, StateWV, StateWI, StateWY:
		return nil
	default:
		return fmt.Errorf("employee: invalid enum value for state field: %q", s)
	}
}

// OrderOption defines the ordering options for the Employee queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByFirstName orders the results by the firstName field.
func ByFirstName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldFirstName, opts...).ToFunc()
}

// ByLastName orders the results by the lastName field.
func ByLastName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldLastName, opts...).ToFunc()
}

// ByDateOfBirth orders the results by the dateOfBirth field.
func ByDateOfBirth(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDateOfBirth, opts...).ToFunc()
}

// ByStartDate orders the results by the startDate field.
func ByStartDate(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldStartDate, opts...).ToFunc()
}

// ByDepartment orders the results by the department field.
func ByDepartment(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDepartment, opts...).ToFunc()
}

// ByStreet orders the results by the street field.
func ByStreet(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldStreet, opts...).ToFunc()
}

// ByCity orders the results by the city field.
func ByCity(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCity, opts...).ToFunc()
}

// ByState orders the results by the state field.
func ByState(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldState, opts...).ToFunc()
}

// ByZipCode orders the results by the zipCode field.
func ByZipCode(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldZipCode, opts...).ToFunc()
}
