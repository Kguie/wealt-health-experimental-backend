// Code generated by ent, DO NOT EDIT.

package employee

import (
	"time"
	"wealth-health-backend/ent/predicate"

	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
)

// ID filters vertices based on their ID field.
func ID(id uuid.UUID) predicate.Employee {
	return predicate.Employee(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uuid.UUID) predicate.Employee {
	return predicate.Employee(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uuid.UUID) predicate.Employee {
	return predicate.Employee(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uuid.UUID) predicate.Employee {
	return predicate.Employee(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uuid.UUID) predicate.Employee {
	return predicate.Employee(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uuid.UUID) predicate.Employee {
	return predicate.Employee(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uuid.UUID) predicate.Employee {
	return predicate.Employee(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uuid.UUID) predicate.Employee {
	return predicate.Employee(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uuid.UUID) predicate.Employee {
	return predicate.Employee(sql.FieldLTE(FieldID, id))
}

// FirstName applies equality check predicate on the "firstName" field. It's identical to FirstNameEQ.
func FirstName(v string) predicate.Employee {
	return predicate.Employee(sql.FieldEQ(FieldFirstName, v))
}

// LastName applies equality check predicate on the "lastName" field. It's identical to LastNameEQ.
func LastName(v string) predicate.Employee {
	return predicate.Employee(sql.FieldEQ(FieldLastName, v))
}

// DateOfBirth applies equality check predicate on the "dateOfBirth" field. It's identical to DateOfBirthEQ.
func DateOfBirth(v time.Time) predicate.Employee {
	return predicate.Employee(sql.FieldEQ(FieldDateOfBirth, v))
}

// StartDate applies equality check predicate on the "startDate" field. It's identical to StartDateEQ.
func StartDate(v time.Time) predicate.Employee {
	return predicate.Employee(sql.FieldEQ(FieldStartDate, v))
}

// Street applies equality check predicate on the "street" field. It's identical to StreetEQ.
func Street(v string) predicate.Employee {
	return predicate.Employee(sql.FieldEQ(FieldStreet, v))
}

// City applies equality check predicate on the "city" field. It's identical to CityEQ.
func City(v string) predicate.Employee {
	return predicate.Employee(sql.FieldEQ(FieldCity, v))
}

// ZipCode applies equality check predicate on the "zipCode" field. It's identical to ZipCodeEQ.
func ZipCode(v string) predicate.Employee {
	return predicate.Employee(sql.FieldEQ(FieldZipCode, v))
}

// FirstNameEQ applies the EQ predicate on the "firstName" field.
func FirstNameEQ(v string) predicate.Employee {
	return predicate.Employee(sql.FieldEQ(FieldFirstName, v))
}

// FirstNameNEQ applies the NEQ predicate on the "firstName" field.
func FirstNameNEQ(v string) predicate.Employee {
	return predicate.Employee(sql.FieldNEQ(FieldFirstName, v))
}

// FirstNameIn applies the In predicate on the "firstName" field.
func FirstNameIn(vs ...string) predicate.Employee {
	return predicate.Employee(sql.FieldIn(FieldFirstName, vs...))
}

// FirstNameNotIn applies the NotIn predicate on the "firstName" field.
func FirstNameNotIn(vs ...string) predicate.Employee {
	return predicate.Employee(sql.FieldNotIn(FieldFirstName, vs...))
}

// FirstNameGT applies the GT predicate on the "firstName" field.
func FirstNameGT(v string) predicate.Employee {
	return predicate.Employee(sql.FieldGT(FieldFirstName, v))
}

// FirstNameGTE applies the GTE predicate on the "firstName" field.
func FirstNameGTE(v string) predicate.Employee {
	return predicate.Employee(sql.FieldGTE(FieldFirstName, v))
}

// FirstNameLT applies the LT predicate on the "firstName" field.
func FirstNameLT(v string) predicate.Employee {
	return predicate.Employee(sql.FieldLT(FieldFirstName, v))
}

// FirstNameLTE applies the LTE predicate on the "firstName" field.
func FirstNameLTE(v string) predicate.Employee {
	return predicate.Employee(sql.FieldLTE(FieldFirstName, v))
}

// FirstNameContains applies the Contains predicate on the "firstName" field.
func FirstNameContains(v string) predicate.Employee {
	return predicate.Employee(sql.FieldContains(FieldFirstName, v))
}

// FirstNameHasPrefix applies the HasPrefix predicate on the "firstName" field.
func FirstNameHasPrefix(v string) predicate.Employee {
	return predicate.Employee(sql.FieldHasPrefix(FieldFirstName, v))
}

// FirstNameHasSuffix applies the HasSuffix predicate on the "firstName" field.
func FirstNameHasSuffix(v string) predicate.Employee {
	return predicate.Employee(sql.FieldHasSuffix(FieldFirstName, v))
}

// FirstNameEqualFold applies the EqualFold predicate on the "firstName" field.
func FirstNameEqualFold(v string) predicate.Employee {
	return predicate.Employee(sql.FieldEqualFold(FieldFirstName, v))
}

// FirstNameContainsFold applies the ContainsFold predicate on the "firstName" field.
func FirstNameContainsFold(v string) predicate.Employee {
	return predicate.Employee(sql.FieldContainsFold(FieldFirstName, v))
}

// LastNameEQ applies the EQ predicate on the "lastName" field.
func LastNameEQ(v string) predicate.Employee {
	return predicate.Employee(sql.FieldEQ(FieldLastName, v))
}

// LastNameNEQ applies the NEQ predicate on the "lastName" field.
func LastNameNEQ(v string) predicate.Employee {
	return predicate.Employee(sql.FieldNEQ(FieldLastName, v))
}

// LastNameIn applies the In predicate on the "lastName" field.
func LastNameIn(vs ...string) predicate.Employee {
	return predicate.Employee(sql.FieldIn(FieldLastName, vs...))
}

// LastNameNotIn applies the NotIn predicate on the "lastName" field.
func LastNameNotIn(vs ...string) predicate.Employee {
	return predicate.Employee(sql.FieldNotIn(FieldLastName, vs...))
}

// LastNameGT applies the GT predicate on the "lastName" field.
func LastNameGT(v string) predicate.Employee {
	return predicate.Employee(sql.FieldGT(FieldLastName, v))
}

// LastNameGTE applies the GTE predicate on the "lastName" field.
func LastNameGTE(v string) predicate.Employee {
	return predicate.Employee(sql.FieldGTE(FieldLastName, v))
}

// LastNameLT applies the LT predicate on the "lastName" field.
func LastNameLT(v string) predicate.Employee {
	return predicate.Employee(sql.FieldLT(FieldLastName, v))
}

// LastNameLTE applies the LTE predicate on the "lastName" field.
func LastNameLTE(v string) predicate.Employee {
	return predicate.Employee(sql.FieldLTE(FieldLastName, v))
}

// LastNameContains applies the Contains predicate on the "lastName" field.
func LastNameContains(v string) predicate.Employee {
	return predicate.Employee(sql.FieldContains(FieldLastName, v))
}

// LastNameHasPrefix applies the HasPrefix predicate on the "lastName" field.
func LastNameHasPrefix(v string) predicate.Employee {
	return predicate.Employee(sql.FieldHasPrefix(FieldLastName, v))
}

// LastNameHasSuffix applies the HasSuffix predicate on the "lastName" field.
func LastNameHasSuffix(v string) predicate.Employee {
	return predicate.Employee(sql.FieldHasSuffix(FieldLastName, v))
}

// LastNameEqualFold applies the EqualFold predicate on the "lastName" field.
func LastNameEqualFold(v string) predicate.Employee {
	return predicate.Employee(sql.FieldEqualFold(FieldLastName, v))
}

// LastNameContainsFold applies the ContainsFold predicate on the "lastName" field.
func LastNameContainsFold(v string) predicate.Employee {
	return predicate.Employee(sql.FieldContainsFold(FieldLastName, v))
}

// DateOfBirthEQ applies the EQ predicate on the "dateOfBirth" field.
func DateOfBirthEQ(v time.Time) predicate.Employee {
	return predicate.Employee(sql.FieldEQ(FieldDateOfBirth, v))
}

// DateOfBirthNEQ applies the NEQ predicate on the "dateOfBirth" field.
func DateOfBirthNEQ(v time.Time) predicate.Employee {
	return predicate.Employee(sql.FieldNEQ(FieldDateOfBirth, v))
}

// DateOfBirthIn applies the In predicate on the "dateOfBirth" field.
func DateOfBirthIn(vs ...time.Time) predicate.Employee {
	return predicate.Employee(sql.FieldIn(FieldDateOfBirth, vs...))
}

// DateOfBirthNotIn applies the NotIn predicate on the "dateOfBirth" field.
func DateOfBirthNotIn(vs ...time.Time) predicate.Employee {
	return predicate.Employee(sql.FieldNotIn(FieldDateOfBirth, vs...))
}

// DateOfBirthGT applies the GT predicate on the "dateOfBirth" field.
func DateOfBirthGT(v time.Time) predicate.Employee {
	return predicate.Employee(sql.FieldGT(FieldDateOfBirth, v))
}

// DateOfBirthGTE applies the GTE predicate on the "dateOfBirth" field.
func DateOfBirthGTE(v time.Time) predicate.Employee {
	return predicate.Employee(sql.FieldGTE(FieldDateOfBirth, v))
}

// DateOfBirthLT applies the LT predicate on the "dateOfBirth" field.
func DateOfBirthLT(v time.Time) predicate.Employee {
	return predicate.Employee(sql.FieldLT(FieldDateOfBirth, v))
}

// DateOfBirthLTE applies the LTE predicate on the "dateOfBirth" field.
func DateOfBirthLTE(v time.Time) predicate.Employee {
	return predicate.Employee(sql.FieldLTE(FieldDateOfBirth, v))
}

// StartDateEQ applies the EQ predicate on the "startDate" field.
func StartDateEQ(v time.Time) predicate.Employee {
	return predicate.Employee(sql.FieldEQ(FieldStartDate, v))
}

// StartDateNEQ applies the NEQ predicate on the "startDate" field.
func StartDateNEQ(v time.Time) predicate.Employee {
	return predicate.Employee(sql.FieldNEQ(FieldStartDate, v))
}

// StartDateIn applies the In predicate on the "startDate" field.
func StartDateIn(vs ...time.Time) predicate.Employee {
	return predicate.Employee(sql.FieldIn(FieldStartDate, vs...))
}

// StartDateNotIn applies the NotIn predicate on the "startDate" field.
func StartDateNotIn(vs ...time.Time) predicate.Employee {
	return predicate.Employee(sql.FieldNotIn(FieldStartDate, vs...))
}

// StartDateGT applies the GT predicate on the "startDate" field.
func StartDateGT(v time.Time) predicate.Employee {
	return predicate.Employee(sql.FieldGT(FieldStartDate, v))
}

// StartDateGTE applies the GTE predicate on the "startDate" field.
func StartDateGTE(v time.Time) predicate.Employee {
	return predicate.Employee(sql.FieldGTE(FieldStartDate, v))
}

// StartDateLT applies the LT predicate on the "startDate" field.
func StartDateLT(v time.Time) predicate.Employee {
	return predicate.Employee(sql.FieldLT(FieldStartDate, v))
}

// StartDateLTE applies the LTE predicate on the "startDate" field.
func StartDateLTE(v time.Time) predicate.Employee {
	return predicate.Employee(sql.FieldLTE(FieldStartDate, v))
}

// DepartmentEQ applies the EQ predicate on the "department" field.
func DepartmentEQ(v Department) predicate.Employee {
	return predicate.Employee(sql.FieldEQ(FieldDepartment, v))
}

// DepartmentNEQ applies the NEQ predicate on the "department" field.
func DepartmentNEQ(v Department) predicate.Employee {
	return predicate.Employee(sql.FieldNEQ(FieldDepartment, v))
}

// DepartmentIn applies the In predicate on the "department" field.
func DepartmentIn(vs ...Department) predicate.Employee {
	return predicate.Employee(sql.FieldIn(FieldDepartment, vs...))
}

// DepartmentNotIn applies the NotIn predicate on the "department" field.
func DepartmentNotIn(vs ...Department) predicate.Employee {
	return predicate.Employee(sql.FieldNotIn(FieldDepartment, vs...))
}

// StreetEQ applies the EQ predicate on the "street" field.
func StreetEQ(v string) predicate.Employee {
	return predicate.Employee(sql.FieldEQ(FieldStreet, v))
}

// StreetNEQ applies the NEQ predicate on the "street" field.
func StreetNEQ(v string) predicate.Employee {
	return predicate.Employee(sql.FieldNEQ(FieldStreet, v))
}

// StreetIn applies the In predicate on the "street" field.
func StreetIn(vs ...string) predicate.Employee {
	return predicate.Employee(sql.FieldIn(FieldStreet, vs...))
}

// StreetNotIn applies the NotIn predicate on the "street" field.
func StreetNotIn(vs ...string) predicate.Employee {
	return predicate.Employee(sql.FieldNotIn(FieldStreet, vs...))
}

// StreetGT applies the GT predicate on the "street" field.
func StreetGT(v string) predicate.Employee {
	return predicate.Employee(sql.FieldGT(FieldStreet, v))
}

// StreetGTE applies the GTE predicate on the "street" field.
func StreetGTE(v string) predicate.Employee {
	return predicate.Employee(sql.FieldGTE(FieldStreet, v))
}

// StreetLT applies the LT predicate on the "street" field.
func StreetLT(v string) predicate.Employee {
	return predicate.Employee(sql.FieldLT(FieldStreet, v))
}

// StreetLTE applies the LTE predicate on the "street" field.
func StreetLTE(v string) predicate.Employee {
	return predicate.Employee(sql.FieldLTE(FieldStreet, v))
}

// StreetContains applies the Contains predicate on the "street" field.
func StreetContains(v string) predicate.Employee {
	return predicate.Employee(sql.FieldContains(FieldStreet, v))
}

// StreetHasPrefix applies the HasPrefix predicate on the "street" field.
func StreetHasPrefix(v string) predicate.Employee {
	return predicate.Employee(sql.FieldHasPrefix(FieldStreet, v))
}

// StreetHasSuffix applies the HasSuffix predicate on the "street" field.
func StreetHasSuffix(v string) predicate.Employee {
	return predicate.Employee(sql.FieldHasSuffix(FieldStreet, v))
}

// StreetEqualFold applies the EqualFold predicate on the "street" field.
func StreetEqualFold(v string) predicate.Employee {
	return predicate.Employee(sql.FieldEqualFold(FieldStreet, v))
}

// StreetContainsFold applies the ContainsFold predicate on the "street" field.
func StreetContainsFold(v string) predicate.Employee {
	return predicate.Employee(sql.FieldContainsFold(FieldStreet, v))
}

// CityEQ applies the EQ predicate on the "city" field.
func CityEQ(v string) predicate.Employee {
	return predicate.Employee(sql.FieldEQ(FieldCity, v))
}

// CityNEQ applies the NEQ predicate on the "city" field.
func CityNEQ(v string) predicate.Employee {
	return predicate.Employee(sql.FieldNEQ(FieldCity, v))
}

// CityIn applies the In predicate on the "city" field.
func CityIn(vs ...string) predicate.Employee {
	return predicate.Employee(sql.FieldIn(FieldCity, vs...))
}

// CityNotIn applies the NotIn predicate on the "city" field.
func CityNotIn(vs ...string) predicate.Employee {
	return predicate.Employee(sql.FieldNotIn(FieldCity, vs...))
}

// CityGT applies the GT predicate on the "city" field.
func CityGT(v string) predicate.Employee {
	return predicate.Employee(sql.FieldGT(FieldCity, v))
}

// CityGTE applies the GTE predicate on the "city" field.
func CityGTE(v string) predicate.Employee {
	return predicate.Employee(sql.FieldGTE(FieldCity, v))
}

// CityLT applies the LT predicate on the "city" field.
func CityLT(v string) predicate.Employee {
	return predicate.Employee(sql.FieldLT(FieldCity, v))
}

// CityLTE applies the LTE predicate on the "city" field.
func CityLTE(v string) predicate.Employee {
	return predicate.Employee(sql.FieldLTE(FieldCity, v))
}

// CityContains applies the Contains predicate on the "city" field.
func CityContains(v string) predicate.Employee {
	return predicate.Employee(sql.FieldContains(FieldCity, v))
}

// CityHasPrefix applies the HasPrefix predicate on the "city" field.
func CityHasPrefix(v string) predicate.Employee {
	return predicate.Employee(sql.FieldHasPrefix(FieldCity, v))
}

// CityHasSuffix applies the HasSuffix predicate on the "city" field.
func CityHasSuffix(v string) predicate.Employee {
	return predicate.Employee(sql.FieldHasSuffix(FieldCity, v))
}

// CityEqualFold applies the EqualFold predicate on the "city" field.
func CityEqualFold(v string) predicate.Employee {
	return predicate.Employee(sql.FieldEqualFold(FieldCity, v))
}

// CityContainsFold applies the ContainsFold predicate on the "city" field.
func CityContainsFold(v string) predicate.Employee {
	return predicate.Employee(sql.FieldContainsFold(FieldCity, v))
}

// StateEQ applies the EQ predicate on the "state" field.
func StateEQ(v State) predicate.Employee {
	return predicate.Employee(sql.FieldEQ(FieldState, v))
}

// StateNEQ applies the NEQ predicate on the "state" field.
func StateNEQ(v State) predicate.Employee {
	return predicate.Employee(sql.FieldNEQ(FieldState, v))
}

// StateIn applies the In predicate on the "state" field.
func StateIn(vs ...State) predicate.Employee {
	return predicate.Employee(sql.FieldIn(FieldState, vs...))
}

// StateNotIn applies the NotIn predicate on the "state" field.
func StateNotIn(vs ...State) predicate.Employee {
	return predicate.Employee(sql.FieldNotIn(FieldState, vs...))
}

// ZipCodeEQ applies the EQ predicate on the "zipCode" field.
func ZipCodeEQ(v string) predicate.Employee {
	return predicate.Employee(sql.FieldEQ(FieldZipCode, v))
}

// ZipCodeNEQ applies the NEQ predicate on the "zipCode" field.
func ZipCodeNEQ(v string) predicate.Employee {
	return predicate.Employee(sql.FieldNEQ(FieldZipCode, v))
}

// ZipCodeIn applies the In predicate on the "zipCode" field.
func ZipCodeIn(vs ...string) predicate.Employee {
	return predicate.Employee(sql.FieldIn(FieldZipCode, vs...))
}

// ZipCodeNotIn applies the NotIn predicate on the "zipCode" field.
func ZipCodeNotIn(vs ...string) predicate.Employee {
	return predicate.Employee(sql.FieldNotIn(FieldZipCode, vs...))
}

// ZipCodeGT applies the GT predicate on the "zipCode" field.
func ZipCodeGT(v string) predicate.Employee {
	return predicate.Employee(sql.FieldGT(FieldZipCode, v))
}

// ZipCodeGTE applies the GTE predicate on the "zipCode" field.
func ZipCodeGTE(v string) predicate.Employee {
	return predicate.Employee(sql.FieldGTE(FieldZipCode, v))
}

// ZipCodeLT applies the LT predicate on the "zipCode" field.
func ZipCodeLT(v string) predicate.Employee {
	return predicate.Employee(sql.FieldLT(FieldZipCode, v))
}

// ZipCodeLTE applies the LTE predicate on the "zipCode" field.
func ZipCodeLTE(v string) predicate.Employee {
	return predicate.Employee(sql.FieldLTE(FieldZipCode, v))
}

// ZipCodeContains applies the Contains predicate on the "zipCode" field.
func ZipCodeContains(v string) predicate.Employee {
	return predicate.Employee(sql.FieldContains(FieldZipCode, v))
}

// ZipCodeHasPrefix applies the HasPrefix predicate on the "zipCode" field.
func ZipCodeHasPrefix(v string) predicate.Employee {
	return predicate.Employee(sql.FieldHasPrefix(FieldZipCode, v))
}

// ZipCodeHasSuffix applies the HasSuffix predicate on the "zipCode" field.
func ZipCodeHasSuffix(v string) predicate.Employee {
	return predicate.Employee(sql.FieldHasSuffix(FieldZipCode, v))
}

// ZipCodeEqualFold applies the EqualFold predicate on the "zipCode" field.
func ZipCodeEqualFold(v string) predicate.Employee {
	return predicate.Employee(sql.FieldEqualFold(FieldZipCode, v))
}

// ZipCodeContainsFold applies the ContainsFold predicate on the "zipCode" field.
func ZipCodeContainsFold(v string) predicate.Employee {
	return predicate.Employee(sql.FieldContainsFold(FieldZipCode, v))
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Employee) predicate.Employee {
	return predicate.Employee(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Employee) predicate.Employee {
	return predicate.Employee(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Employee) predicate.Employee {
	return predicate.Employee(sql.NotPredicates(p))
}
