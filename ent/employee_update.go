// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"
	"wealth-health-backend/ent/employee"
	"wealth-health-backend/ent/predicate"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// EmployeeUpdate is the builder for updating Employee entities.
type EmployeeUpdate struct {
	config
	hooks    []Hook
	mutation *EmployeeMutation
}

// Where appends a list predicates to the EmployeeUpdate builder.
func (eu *EmployeeUpdate) Where(ps ...predicate.Employee) *EmployeeUpdate {
	eu.mutation.Where(ps...)
	return eu
}

// SetFirstName sets the "firstName" field.
func (eu *EmployeeUpdate) SetFirstName(s string) *EmployeeUpdate {
	eu.mutation.SetFirstName(s)
	return eu
}

// SetNillableFirstName sets the "firstName" field if the given value is not nil.
func (eu *EmployeeUpdate) SetNillableFirstName(s *string) *EmployeeUpdate {
	if s != nil {
		eu.SetFirstName(*s)
	}
	return eu
}

// SetLastName sets the "lastName" field.
func (eu *EmployeeUpdate) SetLastName(s string) *EmployeeUpdate {
	eu.mutation.SetLastName(s)
	return eu
}

// SetNillableLastName sets the "lastName" field if the given value is not nil.
func (eu *EmployeeUpdate) SetNillableLastName(s *string) *EmployeeUpdate {
	if s != nil {
		eu.SetLastName(*s)
	}
	return eu
}

// SetDateOfBirth sets the "dateOfBirth" field.
func (eu *EmployeeUpdate) SetDateOfBirth(t time.Time) *EmployeeUpdate {
	eu.mutation.SetDateOfBirth(t)
	return eu
}

// SetNillableDateOfBirth sets the "dateOfBirth" field if the given value is not nil.
func (eu *EmployeeUpdate) SetNillableDateOfBirth(t *time.Time) *EmployeeUpdate {
	if t != nil {
		eu.SetDateOfBirth(*t)
	}
	return eu
}

// SetStartDate sets the "startDate" field.
func (eu *EmployeeUpdate) SetStartDate(t time.Time) *EmployeeUpdate {
	eu.mutation.SetStartDate(t)
	return eu
}

// SetNillableStartDate sets the "startDate" field if the given value is not nil.
func (eu *EmployeeUpdate) SetNillableStartDate(t *time.Time) *EmployeeUpdate {
	if t != nil {
		eu.SetStartDate(*t)
	}
	return eu
}

// SetDepartment sets the "department" field.
func (eu *EmployeeUpdate) SetDepartment(e employee.Department) *EmployeeUpdate {
	eu.mutation.SetDepartment(e)
	return eu
}

// SetNillableDepartment sets the "department" field if the given value is not nil.
func (eu *EmployeeUpdate) SetNillableDepartment(e *employee.Department) *EmployeeUpdate {
	if e != nil {
		eu.SetDepartment(*e)
	}
	return eu
}

// SetStreet sets the "street" field.
func (eu *EmployeeUpdate) SetStreet(s string) *EmployeeUpdate {
	eu.mutation.SetStreet(s)
	return eu
}

// SetNillableStreet sets the "street" field if the given value is not nil.
func (eu *EmployeeUpdate) SetNillableStreet(s *string) *EmployeeUpdate {
	if s != nil {
		eu.SetStreet(*s)
	}
	return eu
}

// SetCity sets the "city" field.
func (eu *EmployeeUpdate) SetCity(s string) *EmployeeUpdate {
	eu.mutation.SetCity(s)
	return eu
}

// SetNillableCity sets the "city" field if the given value is not nil.
func (eu *EmployeeUpdate) SetNillableCity(s *string) *EmployeeUpdate {
	if s != nil {
		eu.SetCity(*s)
	}
	return eu
}

// SetState sets the "state" field.
func (eu *EmployeeUpdate) SetState(e employee.State) *EmployeeUpdate {
	eu.mutation.SetState(e)
	return eu
}

// SetNillableState sets the "state" field if the given value is not nil.
func (eu *EmployeeUpdate) SetNillableState(e *employee.State) *EmployeeUpdate {
	if e != nil {
		eu.SetState(*e)
	}
	return eu
}

// SetZipCode sets the "zipCode" field.
func (eu *EmployeeUpdate) SetZipCode(s string) *EmployeeUpdate {
	eu.mutation.SetZipCode(s)
	return eu
}

// SetNillableZipCode sets the "zipCode" field if the given value is not nil.
func (eu *EmployeeUpdate) SetNillableZipCode(s *string) *EmployeeUpdate {
	if s != nil {
		eu.SetZipCode(*s)
	}
	return eu
}

// Mutation returns the EmployeeMutation object of the builder.
func (eu *EmployeeUpdate) Mutation() *EmployeeMutation {
	return eu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (eu *EmployeeUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, eu.sqlSave, eu.mutation, eu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (eu *EmployeeUpdate) SaveX(ctx context.Context) int {
	affected, err := eu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (eu *EmployeeUpdate) Exec(ctx context.Context) error {
	_, err := eu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (eu *EmployeeUpdate) ExecX(ctx context.Context) {
	if err := eu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (eu *EmployeeUpdate) check() error {
	if v, ok := eu.mutation.FirstName(); ok {
		if err := employee.FirstNameValidator(v); err != nil {
			return &ValidationError{Name: "firstName", err: fmt.Errorf(`ent: validator failed for field "Employee.firstName": %w`, err)}
		}
	}
	if v, ok := eu.mutation.LastName(); ok {
		if err := employee.LastNameValidator(v); err != nil {
			return &ValidationError{Name: "lastName", err: fmt.Errorf(`ent: validator failed for field "Employee.lastName": %w`, err)}
		}
	}
	if v, ok := eu.mutation.Department(); ok {
		if err := employee.DepartmentValidator(v); err != nil {
			return &ValidationError{Name: "department", err: fmt.Errorf(`ent: validator failed for field "Employee.department": %w`, err)}
		}
	}
	if v, ok := eu.mutation.Street(); ok {
		if err := employee.StreetValidator(v); err != nil {
			return &ValidationError{Name: "street", err: fmt.Errorf(`ent: validator failed for field "Employee.street": %w`, err)}
		}
	}
	if v, ok := eu.mutation.City(); ok {
		if err := employee.CityValidator(v); err != nil {
			return &ValidationError{Name: "city", err: fmt.Errorf(`ent: validator failed for field "Employee.city": %w`, err)}
		}
	}
	if v, ok := eu.mutation.State(); ok {
		if err := employee.StateValidator(v); err != nil {
			return &ValidationError{Name: "state", err: fmt.Errorf(`ent: validator failed for field "Employee.state": %w`, err)}
		}
	}
	if v, ok := eu.mutation.ZipCode(); ok {
		if err := employee.ZipCodeValidator(v); err != nil {
			return &ValidationError{Name: "zipCode", err: fmt.Errorf(`ent: validator failed for field "Employee.zipCode": %w`, err)}
		}
	}
	return nil
}

func (eu *EmployeeUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := eu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(employee.Table, employee.Columns, sqlgraph.NewFieldSpec(employee.FieldID, field.TypeUUID))
	if ps := eu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := eu.mutation.FirstName(); ok {
		_spec.SetField(employee.FieldFirstName, field.TypeString, value)
	}
	if value, ok := eu.mutation.LastName(); ok {
		_spec.SetField(employee.FieldLastName, field.TypeString, value)
	}
	if value, ok := eu.mutation.DateOfBirth(); ok {
		_spec.SetField(employee.FieldDateOfBirth, field.TypeTime, value)
	}
	if value, ok := eu.mutation.StartDate(); ok {
		_spec.SetField(employee.FieldStartDate, field.TypeTime, value)
	}
	if value, ok := eu.mutation.Department(); ok {
		_spec.SetField(employee.FieldDepartment, field.TypeEnum, value)
	}
	if value, ok := eu.mutation.Street(); ok {
		_spec.SetField(employee.FieldStreet, field.TypeString, value)
	}
	if value, ok := eu.mutation.City(); ok {
		_spec.SetField(employee.FieldCity, field.TypeString, value)
	}
	if value, ok := eu.mutation.State(); ok {
		_spec.SetField(employee.FieldState, field.TypeEnum, value)
	}
	if value, ok := eu.mutation.ZipCode(); ok {
		_spec.SetField(employee.FieldZipCode, field.TypeString, value)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, eu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{employee.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	eu.mutation.done = true
	return n, nil
}

// EmployeeUpdateOne is the builder for updating a single Employee entity.
type EmployeeUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *EmployeeMutation
}

// SetFirstName sets the "firstName" field.
func (euo *EmployeeUpdateOne) SetFirstName(s string) *EmployeeUpdateOne {
	euo.mutation.SetFirstName(s)
	return euo
}

// SetNillableFirstName sets the "firstName" field if the given value is not nil.
func (euo *EmployeeUpdateOne) SetNillableFirstName(s *string) *EmployeeUpdateOne {
	if s != nil {
		euo.SetFirstName(*s)
	}
	return euo
}

// SetLastName sets the "lastName" field.
func (euo *EmployeeUpdateOne) SetLastName(s string) *EmployeeUpdateOne {
	euo.mutation.SetLastName(s)
	return euo
}

// SetNillableLastName sets the "lastName" field if the given value is not nil.
func (euo *EmployeeUpdateOne) SetNillableLastName(s *string) *EmployeeUpdateOne {
	if s != nil {
		euo.SetLastName(*s)
	}
	return euo
}

// SetDateOfBirth sets the "dateOfBirth" field.
func (euo *EmployeeUpdateOne) SetDateOfBirth(t time.Time) *EmployeeUpdateOne {
	euo.mutation.SetDateOfBirth(t)
	return euo
}

// SetNillableDateOfBirth sets the "dateOfBirth" field if the given value is not nil.
func (euo *EmployeeUpdateOne) SetNillableDateOfBirth(t *time.Time) *EmployeeUpdateOne {
	if t != nil {
		euo.SetDateOfBirth(*t)
	}
	return euo
}

// SetStartDate sets the "startDate" field.
func (euo *EmployeeUpdateOne) SetStartDate(t time.Time) *EmployeeUpdateOne {
	euo.mutation.SetStartDate(t)
	return euo
}

// SetNillableStartDate sets the "startDate" field if the given value is not nil.
func (euo *EmployeeUpdateOne) SetNillableStartDate(t *time.Time) *EmployeeUpdateOne {
	if t != nil {
		euo.SetStartDate(*t)
	}
	return euo
}

// SetDepartment sets the "department" field.
func (euo *EmployeeUpdateOne) SetDepartment(e employee.Department) *EmployeeUpdateOne {
	euo.mutation.SetDepartment(e)
	return euo
}

// SetNillableDepartment sets the "department" field if the given value is not nil.
func (euo *EmployeeUpdateOne) SetNillableDepartment(e *employee.Department) *EmployeeUpdateOne {
	if e != nil {
		euo.SetDepartment(*e)
	}
	return euo
}

// SetStreet sets the "street" field.
func (euo *EmployeeUpdateOne) SetStreet(s string) *EmployeeUpdateOne {
	euo.mutation.SetStreet(s)
	return euo
}

// SetNillableStreet sets the "street" field if the given value is not nil.
func (euo *EmployeeUpdateOne) SetNillableStreet(s *string) *EmployeeUpdateOne {
	if s != nil {
		euo.SetStreet(*s)
	}
	return euo
}

// SetCity sets the "city" field.
func (euo *EmployeeUpdateOne) SetCity(s string) *EmployeeUpdateOne {
	euo.mutation.SetCity(s)
	return euo
}

// SetNillableCity sets the "city" field if the given value is not nil.
func (euo *EmployeeUpdateOne) SetNillableCity(s *string) *EmployeeUpdateOne {
	if s != nil {
		euo.SetCity(*s)
	}
	return euo
}

// SetState sets the "state" field.
func (euo *EmployeeUpdateOne) SetState(e employee.State) *EmployeeUpdateOne {
	euo.mutation.SetState(e)
	return euo
}

// SetNillableState sets the "state" field if the given value is not nil.
func (euo *EmployeeUpdateOne) SetNillableState(e *employee.State) *EmployeeUpdateOne {
	if e != nil {
		euo.SetState(*e)
	}
	return euo
}

// SetZipCode sets the "zipCode" field.
func (euo *EmployeeUpdateOne) SetZipCode(s string) *EmployeeUpdateOne {
	euo.mutation.SetZipCode(s)
	return euo
}

// SetNillableZipCode sets the "zipCode" field if the given value is not nil.
func (euo *EmployeeUpdateOne) SetNillableZipCode(s *string) *EmployeeUpdateOne {
	if s != nil {
		euo.SetZipCode(*s)
	}
	return euo
}

// Mutation returns the EmployeeMutation object of the builder.
func (euo *EmployeeUpdateOne) Mutation() *EmployeeMutation {
	return euo.mutation
}

// Where appends a list predicates to the EmployeeUpdate builder.
func (euo *EmployeeUpdateOne) Where(ps ...predicate.Employee) *EmployeeUpdateOne {
	euo.mutation.Where(ps...)
	return euo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (euo *EmployeeUpdateOne) Select(field string, fields ...string) *EmployeeUpdateOne {
	euo.fields = append([]string{field}, fields...)
	return euo
}

// Save executes the query and returns the updated Employee entity.
func (euo *EmployeeUpdateOne) Save(ctx context.Context) (*Employee, error) {
	return withHooks(ctx, euo.sqlSave, euo.mutation, euo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (euo *EmployeeUpdateOne) SaveX(ctx context.Context) *Employee {
	node, err := euo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (euo *EmployeeUpdateOne) Exec(ctx context.Context) error {
	_, err := euo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (euo *EmployeeUpdateOne) ExecX(ctx context.Context) {
	if err := euo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (euo *EmployeeUpdateOne) check() error {
	if v, ok := euo.mutation.FirstName(); ok {
		if err := employee.FirstNameValidator(v); err != nil {
			return &ValidationError{Name: "firstName", err: fmt.Errorf(`ent: validator failed for field "Employee.firstName": %w`, err)}
		}
	}
	if v, ok := euo.mutation.LastName(); ok {
		if err := employee.LastNameValidator(v); err != nil {
			return &ValidationError{Name: "lastName", err: fmt.Errorf(`ent: validator failed for field "Employee.lastName": %w`, err)}
		}
	}
	if v, ok := euo.mutation.Department(); ok {
		if err := employee.DepartmentValidator(v); err != nil {
			return &ValidationError{Name: "department", err: fmt.Errorf(`ent: validator failed for field "Employee.department": %w`, err)}
		}
	}
	if v, ok := euo.mutation.Street(); ok {
		if err := employee.StreetValidator(v); err != nil {
			return &ValidationError{Name: "street", err: fmt.Errorf(`ent: validator failed for field "Employee.street": %w`, err)}
		}
	}
	if v, ok := euo.mutation.City(); ok {
		if err := employee.CityValidator(v); err != nil {
			return &ValidationError{Name: "city", err: fmt.Errorf(`ent: validator failed for field "Employee.city": %w`, err)}
		}
	}
	if v, ok := euo.mutation.State(); ok {
		if err := employee.StateValidator(v); err != nil {
			return &ValidationError{Name: "state", err: fmt.Errorf(`ent: validator failed for field "Employee.state": %w`, err)}
		}
	}
	if v, ok := euo.mutation.ZipCode(); ok {
		if err := employee.ZipCodeValidator(v); err != nil {
			return &ValidationError{Name: "zipCode", err: fmt.Errorf(`ent: validator failed for field "Employee.zipCode": %w`, err)}
		}
	}
	return nil
}

func (euo *EmployeeUpdateOne) sqlSave(ctx context.Context) (_node *Employee, err error) {
	if err := euo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(employee.Table, employee.Columns, sqlgraph.NewFieldSpec(employee.FieldID, field.TypeUUID))
	id, ok := euo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Employee.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := euo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, employee.FieldID)
		for _, f := range fields {
			if !employee.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != employee.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := euo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := euo.mutation.FirstName(); ok {
		_spec.SetField(employee.FieldFirstName, field.TypeString, value)
	}
	if value, ok := euo.mutation.LastName(); ok {
		_spec.SetField(employee.FieldLastName, field.TypeString, value)
	}
	if value, ok := euo.mutation.DateOfBirth(); ok {
		_spec.SetField(employee.FieldDateOfBirth, field.TypeTime, value)
	}
	if value, ok := euo.mutation.StartDate(); ok {
		_spec.SetField(employee.FieldStartDate, field.TypeTime, value)
	}
	if value, ok := euo.mutation.Department(); ok {
		_spec.SetField(employee.FieldDepartment, field.TypeEnum, value)
	}
	if value, ok := euo.mutation.Street(); ok {
		_spec.SetField(employee.FieldStreet, field.TypeString, value)
	}
	if value, ok := euo.mutation.City(); ok {
		_spec.SetField(employee.FieldCity, field.TypeString, value)
	}
	if value, ok := euo.mutation.State(); ok {
		_spec.SetField(employee.FieldState, field.TypeEnum, value)
	}
	if value, ok := euo.mutation.ZipCode(); ok {
		_spec.SetField(employee.FieldZipCode, field.TypeString, value)
	}
	_node = &Employee{config: euo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, euo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{employee.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	euo.mutation.done = true
	return _node, nil
}
