// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"
	"wealth-health-backend/ent/employee"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
)

// EmployeeCreate is the builder for creating a Employee entity.
type EmployeeCreate struct {
	config
	mutation *EmployeeMutation
	hooks    []Hook
}

// SetFirstName sets the "firstName" field.
func (ec *EmployeeCreate) SetFirstName(s string) *EmployeeCreate {
	ec.mutation.SetFirstName(s)
	return ec
}

// SetLastName sets the "lastName" field.
func (ec *EmployeeCreate) SetLastName(s string) *EmployeeCreate {
	ec.mutation.SetLastName(s)
	return ec
}

// SetDateOfBirth sets the "dateOfBirth" field.
func (ec *EmployeeCreate) SetDateOfBirth(t time.Time) *EmployeeCreate {
	ec.mutation.SetDateOfBirth(t)
	return ec
}

// SetStartDate sets the "startDate" field.
func (ec *EmployeeCreate) SetStartDate(t time.Time) *EmployeeCreate {
	ec.mutation.SetStartDate(t)
	return ec
}

// SetDepartment sets the "department" field.
func (ec *EmployeeCreate) SetDepartment(s string) *EmployeeCreate {
	ec.mutation.SetDepartment(s)
	return ec
}

// SetStreet sets the "street" field.
func (ec *EmployeeCreate) SetStreet(s string) *EmployeeCreate {
	ec.mutation.SetStreet(s)
	return ec
}

// SetCity sets the "city" field.
func (ec *EmployeeCreate) SetCity(s string) *EmployeeCreate {
	ec.mutation.SetCity(s)
	return ec
}

// SetState sets the "state" field.
func (ec *EmployeeCreate) SetState(s string) *EmployeeCreate {
	ec.mutation.SetState(s)
	return ec
}

// SetZipCode sets the "zipCode" field.
func (ec *EmployeeCreate) SetZipCode(s string) *EmployeeCreate {
	ec.mutation.SetZipCode(s)
	return ec
}

// SetID sets the "id" field.
func (ec *EmployeeCreate) SetID(u uuid.UUID) *EmployeeCreate {
	ec.mutation.SetID(u)
	return ec
}

// SetNillableID sets the "id" field if the given value is not nil.
func (ec *EmployeeCreate) SetNillableID(u *uuid.UUID) *EmployeeCreate {
	if u != nil {
		ec.SetID(*u)
	}
	return ec
}

// Mutation returns the EmployeeMutation object of the builder.
func (ec *EmployeeCreate) Mutation() *EmployeeMutation {
	return ec.mutation
}

// Save creates the Employee in the database.
func (ec *EmployeeCreate) Save(ctx context.Context) (*Employee, error) {
	ec.defaults()
	return withHooks(ctx, ec.sqlSave, ec.mutation, ec.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (ec *EmployeeCreate) SaveX(ctx context.Context) *Employee {
	v, err := ec.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ec *EmployeeCreate) Exec(ctx context.Context) error {
	_, err := ec.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ec *EmployeeCreate) ExecX(ctx context.Context) {
	if err := ec.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ec *EmployeeCreate) defaults() {
	if _, ok := ec.mutation.ID(); !ok {
		v := employee.DefaultID()
		ec.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ec *EmployeeCreate) check() error {
	if _, ok := ec.mutation.FirstName(); !ok {
		return &ValidationError{Name: "firstName", err: errors.New(`ent: missing required field "Employee.firstName"`)}
	}
	if v, ok := ec.mutation.FirstName(); ok {
		if err := employee.FirstNameValidator(v); err != nil {
			return &ValidationError{Name: "firstName", err: fmt.Errorf(`ent: validator failed for field "Employee.firstName": %w`, err)}
		}
	}
	if _, ok := ec.mutation.LastName(); !ok {
		return &ValidationError{Name: "lastName", err: errors.New(`ent: missing required field "Employee.lastName"`)}
	}
	if v, ok := ec.mutation.LastName(); ok {
		if err := employee.LastNameValidator(v); err != nil {
			return &ValidationError{Name: "lastName", err: fmt.Errorf(`ent: validator failed for field "Employee.lastName": %w`, err)}
		}
	}
	if _, ok := ec.mutation.DateOfBirth(); !ok {
		return &ValidationError{Name: "dateOfBirth", err: errors.New(`ent: missing required field "Employee.dateOfBirth"`)}
	}
	if _, ok := ec.mutation.StartDate(); !ok {
		return &ValidationError{Name: "startDate", err: errors.New(`ent: missing required field "Employee.startDate"`)}
	}
	if _, ok := ec.mutation.Department(); !ok {
		return &ValidationError{Name: "department", err: errors.New(`ent: missing required field "Employee.department"`)}
	}
	if v, ok := ec.mutation.Department(); ok {
		if err := employee.DepartmentValidator(v); err != nil {
			return &ValidationError{Name: "department", err: fmt.Errorf(`ent: validator failed for field "Employee.department": %w`, err)}
		}
	}
	if _, ok := ec.mutation.Street(); !ok {
		return &ValidationError{Name: "street", err: errors.New(`ent: missing required field "Employee.street"`)}
	}
	if v, ok := ec.mutation.Street(); ok {
		if err := employee.StreetValidator(v); err != nil {
			return &ValidationError{Name: "street", err: fmt.Errorf(`ent: validator failed for field "Employee.street": %w`, err)}
		}
	}
	if _, ok := ec.mutation.City(); !ok {
		return &ValidationError{Name: "city", err: errors.New(`ent: missing required field "Employee.city"`)}
	}
	if v, ok := ec.mutation.City(); ok {
		if err := employee.CityValidator(v); err != nil {
			return &ValidationError{Name: "city", err: fmt.Errorf(`ent: validator failed for field "Employee.city": %w`, err)}
		}
	}
	if _, ok := ec.mutation.State(); !ok {
		return &ValidationError{Name: "state", err: errors.New(`ent: missing required field "Employee.state"`)}
	}
	if v, ok := ec.mutation.State(); ok {
		if err := employee.StateValidator(v); err != nil {
			return &ValidationError{Name: "state", err: fmt.Errorf(`ent: validator failed for field "Employee.state": %w`, err)}
		}
	}
	if _, ok := ec.mutation.ZipCode(); !ok {
		return &ValidationError{Name: "zipCode", err: errors.New(`ent: missing required field "Employee.zipCode"`)}
	}
	if v, ok := ec.mutation.ZipCode(); ok {
		if err := employee.ZipCodeValidator(v); err != nil {
			return &ValidationError{Name: "zipCode", err: fmt.Errorf(`ent: validator failed for field "Employee.zipCode": %w`, err)}
		}
	}
	return nil
}

func (ec *EmployeeCreate) sqlSave(ctx context.Context) (*Employee, error) {
	if err := ec.check(); err != nil {
		return nil, err
	}
	_node, _spec := ec.createSpec()
	if err := sqlgraph.CreateNode(ctx, ec.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	ec.mutation.id = &_node.ID
	ec.mutation.done = true
	return _node, nil
}

func (ec *EmployeeCreate) createSpec() (*Employee, *sqlgraph.CreateSpec) {
	var (
		_node = &Employee{config: ec.config}
		_spec = sqlgraph.NewCreateSpec(employee.Table, sqlgraph.NewFieldSpec(employee.FieldID, field.TypeUUID))
	)
	if id, ok := ec.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := ec.mutation.FirstName(); ok {
		_spec.SetField(employee.FieldFirstName, field.TypeString, value)
		_node.FirstName = value
	}
	if value, ok := ec.mutation.LastName(); ok {
		_spec.SetField(employee.FieldLastName, field.TypeString, value)
		_node.LastName = value
	}
	if value, ok := ec.mutation.DateOfBirth(); ok {
		_spec.SetField(employee.FieldDateOfBirth, field.TypeTime, value)
		_node.DateOfBirth = value
	}
	if value, ok := ec.mutation.StartDate(); ok {
		_spec.SetField(employee.FieldStartDate, field.TypeTime, value)
		_node.StartDate = value
	}
	if value, ok := ec.mutation.Department(); ok {
		_spec.SetField(employee.FieldDepartment, field.TypeString, value)
		_node.Department = value
	}
	if value, ok := ec.mutation.Street(); ok {
		_spec.SetField(employee.FieldStreet, field.TypeString, value)
		_node.Street = value
	}
	if value, ok := ec.mutation.City(); ok {
		_spec.SetField(employee.FieldCity, field.TypeString, value)
		_node.City = value
	}
	if value, ok := ec.mutation.State(); ok {
		_spec.SetField(employee.FieldState, field.TypeString, value)
		_node.State = value
	}
	if value, ok := ec.mutation.ZipCode(); ok {
		_spec.SetField(employee.FieldZipCode, field.TypeString, value)
		_node.ZipCode = value
	}
	return _node, _spec
}

// EmployeeCreateBulk is the builder for creating many Employee entities in bulk.
type EmployeeCreateBulk struct {
	config
	err      error
	builders []*EmployeeCreate
}

// Save creates the Employee entities in the database.
func (ecb *EmployeeCreateBulk) Save(ctx context.Context) ([]*Employee, error) {
	if ecb.err != nil {
		return nil, ecb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(ecb.builders))
	nodes := make([]*Employee, len(ecb.builders))
	mutators := make([]Mutator, len(ecb.builders))
	for i := range ecb.builders {
		func(i int, root context.Context) {
			builder := ecb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*EmployeeMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, ecb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, ecb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, ecb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (ecb *EmployeeCreateBulk) SaveX(ctx context.Context) []*Employee {
	v, err := ecb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ecb *EmployeeCreateBulk) Exec(ctx context.Context) error {
	_, err := ecb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ecb *EmployeeCreateBulk) ExecX(ctx context.Context) {
	if err := ecb.Exec(ctx); err != nil {
		panic(err)
	}
}
