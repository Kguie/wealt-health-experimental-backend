package main

import (
	"context"
	"log"
	"os"
	"os/signal"
	"syscall"
	"time"
	"wealth-health-backend/cmd/api"
)

func main() {
	// Cr√©ation d'un contexte avec annulation
	ctx, cancel := context.WithCancel(context.Background())

	// Capture des signaux syst√®me (CTRL+C, SIGTERM)
	signalChan := make(chan os.Signal, 1)
	signal.Notify(signalChan, os.Interrupt, syscall.SIGTERM)

	// Initialisation et d√©marrage de l'API
	app := api.New()
	log.Println("‚úÖ Wealth Health API is starting...")

	// Lancer l'API dans une goroutine
	go func() {
		if err := app.Start(ctx); err != nil {
			log.Fatalf("‚ùå Erreur lors du d√©marrage de l'API : %v", err)
		}
	}()

	// Attente d'un signal d'arr√™t
	<-signalChan
	log.Println("üõë Signal de fermeture re√ßu pour l'API.")

	// Annuler le contexte (fermeture propre des services)
	cancel()

	// Arr√™t propre de l'API
	shutdownCtx, shutdownCancel := context.WithTimeout(context.Background(), 10*time.Second)
	defer shutdownCancel()

	if err := app.Shutdown(shutdownCtx); err != nil {
		log.Fatalf("‚ùå Erreur lors du shutdown : %v", err)
	}

	log.Println("‚úÖ Wealth Health API s'est arr√™t√©e proprement.")
}
